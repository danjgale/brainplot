
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_tutorial_03.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_tutorial_03.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_tutorial_03.py:


.. _tutorial03_ref:

Tutorial 3: Types of Input Data
===============================

This tutorial covers what types of data can be passed to the `data` parameter
of the :func:`~brainspace.plotting.Plot.add_layer` method of 
:class:`~brainspace.plotting.Plot`.

`data` accepts four different types of data:

1. A numpy array of vertex data
2. A file path of a valid GIFTI or CIFTI file 
3. Instances of ``nibabel.gifti.gifti.GiftiImage`` or ``nibabel.cifti2.cifti2.Cifti2Image``
4. A dictionary with 'left' and/or 'right' keys to explicity assign any of the above data types to either hemisphere.

This flexibility makes it easy to plot any surface data by accommodating both 
GIFTI and CIFTI data. Let's dig into this further.

Getting data
------------

Here we'll reuse the Conte69 fsLR surfaces and Freesurfer sulc maps we used in 
:ref:`sphx_glr_auto_examples_plot_tutorial_01.py`, both of which are 
downloaded via ``neuromaps``. We'll also reuse the example data. 

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: default

    from neuromaps.datasets import fetch_fslr
    from surfplot.datasets import load_example_data

    surfaces = fetch_fslr()
    lh, rh = surfaces['inflated']








.. GENERATED FROM PYTHON SOURCE LINES 36-44

Arrays
------

A numpy array can be passed to `data` in the 
:func:`~brainspace.plotting.Plot.add_layer` method. Importantly, the length 
of this array **must equal the total number of vertices of the hemispheres 
that are plotted.** With our surfaces, we can check their vertices using 
``nibabel``:

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default

    import nibabel as nib
    print('left', nib.load(lh).darrays[0].dims)
    print('right', nib.load(rh).darrays[0].dims)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    left [32492, 3]
    right [32492, 3]




.. GENERATED FROM PYTHON SOURCE LINES 48-50

Therefore, our data must have a length of 32492 + 32492 = 64984 if we want
to plot both hemispheres. Let's check this first:

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: default


    # return a single concatenated array from both hemispheres
    data = load_example_data(join=True)
    print(len(data) == 64984)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 55-56

Perfect, now let's plot: 

.. GENERATED FROM PYTHON SOURCE LINES 56-62

.. code-block:: default

    from surfplot import Plot

    p = Plot(surf_lh=lh, surf_rh=rh)
    p.add_layer(data, cmap='YlOrRd_r')
    fig = p.build()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_001.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-66

Note that passing a single array **assumes it goes from the left hemisphere 
to the right**. If we want to plot just one hemisphere, then we have to 
update our data accordingly. Be sure to plot the correct data!

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: default

    p = Plot(surf_lh=lh, zoom=1.2, size=(400, 200))
    # left hemisphere is the first 32492 vertices 
    p.add_layer(data[:32492], cmap='YlOrRd_r')
    fig = p.build()
    fig.show()
    # sphinx_gallery_thumbnail_number = 2



.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_002.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-82

Using a dictionary
------------------

To be explicit about which data is passed to which hemisphere, it is also 
possible to use a dictionary to assign data to a hemisphere. The dictionary
**must** have 'left' and/or 'right' keys only. This is exactly how data was
passed to the final figure in 
:ref:`sphx_glr_auto_examples_plot_tutorial_01.py`. Note that the length of 
each array must equal the number of vertices in their respective hemispheres.

.. GENERATED FROM PYTHON SOURCE LINES 82-90

.. code-block:: default


    # return as separate arrays for each hemisphere
    lh_data, rh_data = load_example_data()

    p = Plot(surf_lh=lh, surf_rh=rh)
    p.add_layer({'left': lh_data, 'right': rh_data}, cmap='YlOrRd_r')
    fig = p.build()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_003.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-93

Using a dictionary, we can also only plot data for a specific hemisphere, 
e.g., the right:

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default

    p = Plot(surf_lh=lh, surf_rh=rh)
    p.add_layer({'right': rh_data}, cmap='YlOrRd_r')
    fig = p.build()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_004.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-109

Using dictionaries is necessary when plotting data from left and/or right 
GIFTI files, which we'll cover in the next section.

File names
----------

It is possible to directly pass in file names, assuming that they're valid
and readable with ``nibabel``. These files must be either GIFTI or CIFTI 
images. When plotting both hemispheres, you will need a dictionary to assign 
each each GIFTI to a hemisphere. To test this out, let's get the downloaded
sulc maps and add them: 

.. GENERATED FROM PYTHON SOURCE LINES 109-115

.. code-block:: default

    lh_sulc, rh_sulc = surfaces['sulc']
    p = Plot(surf_lh=lh, surf_rh=rh)
    p.add_layer({'left': lh_sulc, 'right': rh_sulc}, cmap='binary_r', cbar=False)
    fig = p.build()
    fig.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_005.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 116-121

Loaded files
------------

Finally, if a file was already loaded into Python using ``nibabel``, then it
can also be plotted. For example, with single hemisphere:

.. GENERATED FROM PYTHON SOURCE LINES 121-127

.. code-block:: default

    img = nib.load(lh_sulc)

    p = Plot(surf_lh=lh, zoom=1.2, size=(400, 200))
    p.add_layer(img, cmap='binary_r', cbar=False)
    fig = p.build()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_tutorial_03_006.png
   :alt: plot tutorial 03
   :srcset: /auto_examples/images/sphx_glr_plot_tutorial_03_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 128-131

Altogether, this flexibility makes it easy to plot data in a variety of 
different workflows and usecases. As always, be sure to check that the data
is passed to the correct hemisphere, and that the number of vertices in the
data match the number of vertices of the surface(s)!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.920 seconds)


.. _sphx_glr_download_auto_examples_plot_tutorial_03.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_tutorial_03.py <plot_tutorial_03.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_tutorial_03.ipynb <plot_tutorial_03.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
